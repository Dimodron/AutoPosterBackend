from os import environ
from grpc.aio import insecure_channel
from interface.ai_service_pb2 import  ManualGeneratedRequest,AutoGeneratedRequest
from interface.ai_service_pb2_grpc import AiServiceStub

class Ai:
    
    def __init__(self) -> None:
        self.endpoint: str = environ.get('AI_PROCESSOR_API_GRPC_URL')

    async def get_post(self, prompt:str, lang:str):

        async with insecure_channel(self.endpoint) as channel:
            
            stub = AiServiceStub(channel)
            
            request = ManualGeneratedRequest(
                prompt = prompt,
                lang = lang,
            )
            
            response = await stub.ManualGeneratedPosts(request)

            if response.status_code != 200:
                raise SystemError(f'ai-processor | {response.detail}')

            return response.data

    async def get_auto_post(self, 
        posts:list[dict],
        prompts:list[str],
        prompt_base:str,
        tone_of_voice:str,
        words_count:int,
        use_hashtag:bool,
        use_emoji:bool, 
        lang:str):

        async with insecure_channel(self.endpoint) as channel:
            
            stub = AiServiceStub(channel)
            
            request = AutoGeneratedRequest(
                posts = posts,
                prompt_base = prompt_base,
                tone_of_voice = tone_of_voice, 
                lang = lang,
                prompts = prompts,
                words_count = words_count,
                use_emoji = use_emoji,
                use_hashtag = use_hashtag,
            )
            
            response = await stub.AutoGeneratedPosts(request)

            if response.status_code != 200:
                raise SystemError(f'ai-processor | {response.detail}')

            return response.data