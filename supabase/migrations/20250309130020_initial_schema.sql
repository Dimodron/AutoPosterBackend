create table "public"."generated_posts" (
    "id" bigint generated by default as identity not null,
    "content" text not null,
    "image_url" text,
    "user_id" uuid,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."generated_posts" enable row level security;

create table "public"."profiles" (
    "firstname" character varying(255),
    "lastname" character varying(255),
    "company" character varying(255),
    "postal_code" character varying(10),
    "country" character varying(255),
    "language" character varying(3) not null default 'RU'::character varying,
    "timezone" character varying(15),
    "currency" character varying(3) not null default 'RUB'::character varying,
    "balance" double precision not null default 0.0,
    "user_id" uuid not null,
    "is_active" boolean not null default true
);


alter table "public"."profiles" enable row level security;

create table "public"."telegram" (
    "id" bigint generated by default as identity not null,
    "channels_to_parse" character varying[],
    "is_active" boolean not null default true,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null,
    "telegram_maintainer_channel" character varying,
    "parsing_timeout" integer not null default 10,
    "tov" text not null default 'serious'::text,
    "prompt_base" text not null default 'advertising_creative'::text,
    "words_count" integer not null default 500,
    "use_emoji" boolean not null default true,
    "use_hashtag" boolean not null default true,
    "count_of_posts" smallint not null default '10'::smallint,
    "prompts" text[]
);


alter table "public"."telegram" enable row level security;

create table "public"."telegram_parsed_posts" (
    "id" bigint generated by default as identity not null,
    "channel" character varying not null,
    "post_id" bigint not null,
    "posted_at" timestamp with time zone not null,
    "content" text not null,
    "users" uuid[],
    "parsing_date" timestamp with time zone not null default now()
);


alter table "public"."telegram_parsed_posts" enable row level security;

CREATE UNIQUE INDEX generated_posts_pkey ON public.generated_posts USING btree (id);

CREATE UNIQUE INDEX integrations_pkey ON public.telegram USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (user_id);

CREATE UNIQUE INDEX telegram_parsed_posts_pkey ON public.telegram_parsed_posts USING btree (id);

alter table "public"."generated_posts" add constraint "generated_posts_pkey" PRIMARY KEY using index "generated_posts_pkey";

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."telegram" add constraint "integrations_pkey" PRIMARY KEY using index "integrations_pkey";

alter table "public"."telegram_parsed_posts" add constraint "telegram_parsed_posts_pkey" PRIMARY KEY using index "telegram_parsed_posts_pkey";

alter table "public"."generated_posts" add constraint "generated_posts_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."generated_posts" validate constraint "generated_posts_user_id_fkey";

alter table "public"."profiles" add constraint "profiles_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."profiles" validate constraint "profiles_user_id_fkey";

alter table "public"."telegram" add constraint "integrations_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."telegram" validate constraint "integrations_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
    INSERT INTO public.profiles (
        user_id,
        firstname,
        lastname,
        company,
        postal_code,
        country,
        language,
        timezone,
        currency,
        balance,
        is_active
    )
    VALUES (
        NEW.id,
        COALESCE(NEW.raw_user_meta_data ->> 'firstname', ''),
        COALESCE(NEW.raw_user_meta_data ->> 'lastname', ''),
        COALESCE(NEW.raw_user_meta_data ->> 'company', ''),
        COALESCE(NEW.raw_user_meta_data ->> 'postal_code', ''),
        COALESCE(NEW.raw_user_meta_data ->> 'country', ''),
        'RU',
        COALESCE(NEW.raw_user_meta_data ->> 'timezone', 'UTC'),
        'RUB',
        0.0,
        true
    );

    -- 2) Создаём запись в telegram
    INSERT INTO public.telegram (
      id,
      is_active,
      created_at,
      user_id,
      channels_to_parse,
      telegram_maintainer_channel,
      parsing_timeout,
      tov,
      prompt_base,
      words_count,
      use_emoji,
      use_hashtag,
      count_of_posts,
      prompts
    )
    VALUES (
      DEFAULT,              -- id автоинкрементируется
      true,
      NOW(),
      NEW.id,              -- cвязка по user_id = auth.users.id
      ARRAY[]::varchar[],     -- Пустой массив строк (тип _varchar)
      '',
      10,
      'serious',
      'advertising_creative',
      500,
      true,
      true,
      10,
      ARRAY['Нужно уникализировать пост', 'Пост должен содержать экспертное мнение', 'Нужно повысить читаемость поста']::text[]
    );

    RETURN NEW;
END;$function$
;

CREATE OR REPLACE FUNCTION public.merge_duplicates_after_insert()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
DECLARE
  merged_user_ids uuid[];
  min_id integer;
BEGIN
  -- Собираем объединённый массив user_ids для всех записей с одинаковым content
  SELECT array_agg(DISTINCT user_id_elem)
  INTO merged_user_ids
  FROM (
    SELECT unnest(users) AS user_id_elem
    FROM telegram_parsed_posts
    WHERE content = NEW.content
  ) sub;
  
  -- Определяем id записи, которую оставим (например, с минимальным id)
  SELECT min(id)
  INTO min_id
  FROM telegram_parsed_posts
  WHERE content = NEW.content;
  
  -- Обновляем выбранную запись объединённым массивом
  UPDATE telegram_parsed_posts
  SET users = merged_user_ids
  WHERE id = min_id;
  
  -- Удаляем все остальные дубликаты по данному ключу
  DELETE FROM telegram_parsed_posts
  WHERE content = NEW.content AND id <> min_id;
  
  RETURN NEW;
END;
$function$
;

grant delete on table "public"."generated_posts" to "anon";

grant insert on table "public"."generated_posts" to "anon";

grant references on table "public"."generated_posts" to "anon";

grant select on table "public"."generated_posts" to "anon";

grant trigger on table "public"."generated_posts" to "anon";

grant truncate on table "public"."generated_posts" to "anon";

grant update on table "public"."generated_posts" to "anon";

grant delete on table "public"."generated_posts" to "authenticated";

grant insert on table "public"."generated_posts" to "authenticated";

grant references on table "public"."generated_posts" to "authenticated";

grant select on table "public"."generated_posts" to "authenticated";

grant trigger on table "public"."generated_posts" to "authenticated";

grant truncate on table "public"."generated_posts" to "authenticated";

grant update on table "public"."generated_posts" to "authenticated";

grant delete on table "public"."generated_posts" to "service_role";

grant insert on table "public"."generated_posts" to "service_role";

grant references on table "public"."generated_posts" to "service_role";

grant select on table "public"."generated_posts" to "service_role";

grant trigger on table "public"."generated_posts" to "service_role";

grant truncate on table "public"."generated_posts" to "service_role";

grant update on table "public"."generated_posts" to "service_role";

grant delete on table "public"."profiles" to "anon";

grant insert on table "public"."profiles" to "anon";

grant references on table "public"."profiles" to "anon";

grant select on table "public"."profiles" to "anon";

grant trigger on table "public"."profiles" to "anon";

grant truncate on table "public"."profiles" to "anon";

grant update on table "public"."profiles" to "anon";

grant delete on table "public"."profiles" to "authenticated";

grant insert on table "public"."profiles" to "authenticated";

grant references on table "public"."profiles" to "authenticated";

grant select on table "public"."profiles" to "authenticated";

grant trigger on table "public"."profiles" to "authenticated";

grant truncate on table "public"."profiles" to "authenticated";

grant update on table "public"."profiles" to "authenticated";

grant delete on table "public"."profiles" to "service_role";

grant insert on table "public"."profiles" to "service_role";

grant references on table "public"."profiles" to "service_role";

grant select on table "public"."profiles" to "service_role";

grant trigger on table "public"."profiles" to "service_role";

grant truncate on table "public"."profiles" to "service_role";

grant update on table "public"."profiles" to "service_role";

grant delete on table "public"."telegram" to "anon";

grant insert on table "public"."telegram" to "anon";

grant references on table "public"."telegram" to "anon";

grant select on table "public"."telegram" to "anon";

grant trigger on table "public"."telegram" to "anon";

grant truncate on table "public"."telegram" to "anon";

grant update on table "public"."telegram" to "anon";

grant delete on table "public"."telegram" to "authenticated";

grant insert on table "public"."telegram" to "authenticated";

grant references on table "public"."telegram" to "authenticated";

grant select on table "public"."telegram" to "authenticated";

grant trigger on table "public"."telegram" to "authenticated";

grant truncate on table "public"."telegram" to "authenticated";

grant update on table "public"."telegram" to "authenticated";

grant delete on table "public"."telegram" to "service_role";

grant insert on table "public"."telegram" to "service_role";

grant references on table "public"."telegram" to "service_role";

grant select on table "public"."telegram" to "service_role";

grant trigger on table "public"."telegram" to "service_role";

grant truncate on table "public"."telegram" to "service_role";

grant update on table "public"."telegram" to "service_role";

grant delete on table "public"."telegram_parsed_posts" to "anon";

grant insert on table "public"."telegram_parsed_posts" to "anon";

grant references on table "public"."telegram_parsed_posts" to "anon";

grant select on table "public"."telegram_parsed_posts" to "anon";

grant trigger on table "public"."telegram_parsed_posts" to "anon";

grant truncate on table "public"."telegram_parsed_posts" to "anon";

grant update on table "public"."telegram_parsed_posts" to "anon";

grant delete on table "public"."telegram_parsed_posts" to "authenticated";

grant insert on table "public"."telegram_parsed_posts" to "authenticated";

grant references on table "public"."telegram_parsed_posts" to "authenticated";

grant select on table "public"."telegram_parsed_posts" to "authenticated";

grant trigger on table "public"."telegram_parsed_posts" to "authenticated";

grant truncate on table "public"."telegram_parsed_posts" to "authenticated";

grant update on table "public"."telegram_parsed_posts" to "authenticated";

grant delete on table "public"."telegram_parsed_posts" to "service_role";

grant insert on table "public"."telegram_parsed_posts" to "service_role";

grant references on table "public"."telegram_parsed_posts" to "service_role";

grant select on table "public"."telegram_parsed_posts" to "service_role";

grant trigger on table "public"."telegram_parsed_posts" to "service_role";

grant truncate on table "public"."telegram_parsed_posts" to "service_role";

grant update on table "public"."telegram_parsed_posts" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."generated_posts"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."generated_posts"
as permissive
for select
to public
using (true);


create policy "Allow access to own profiles"
on "public"."profiles"
as permissive
for all
to public
using ((auth.uid() = user_id));


create policy "Allow access to own integrations"
on "public"."telegram"
as permissive
for all
to public
using ((auth.uid() = user_id));


create policy "Service can read all rows"
on "public"."telegram"
as permissive
for select
to service_role
using (true);


create policy "Enable insert for authenticated users only"
on "public"."telegram_parsed_posts"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."telegram_parsed_posts"
as permissive
for select
to public
using (true);


CREATE TRIGGER merge_duplicates_trigger AFTER INSERT ON public.telegram_parsed_posts FOR EACH ROW EXECUTE FUNCTION merge_duplicates_after_insert();


