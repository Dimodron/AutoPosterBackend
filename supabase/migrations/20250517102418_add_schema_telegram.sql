create schema if not exists "telegram";

create table "telegram"."manual_posts" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null,
    "parent_id" bigint,
    "content" text not null,
    "image_url" text,
    "scheduled_at" timestamp with time zone,
    "is_publicated" boolean not null default false,
    "created_at" timestamp with time zone not null default now()
);


alter table "telegram"."manual_posts" enable row level security;

create table "telegram"."options" (
    "id" bigint generated by default as identity not null,
    "channels_to_parse" character varying[],
    "user_id" uuid not null,
    "telegram_maintainer_channel" character varying,
    "autoposting_timeout" integer not null default 60,
    "parsing_timeout" integer not null default 30,
    "tov" text not null default 'serious'::text,
    "prompt_base" text not null default 'advertising_creative'::text,
    "words_count" integer not null default 500,
    "use_emoji" boolean not null default true,
    "use_hashtag" boolean not null default true,
    "count_of_posts" smallint not null default '1'::smallint,
    "prompts" text[],
    "prompt_img" text,
    "active_until" timestamp with time zone,
    "created_at" timestamp with time zone not null default now()
);


alter table "telegram"."options" enable row level security;

create table "telegram"."parsed_posts" (
    "id" bigint generated by default as identity not null,
    "channel" text not null,
    "content" text not null,
    "posted_at" timestamp with time zone not null,
    "users" uuid[] default '{}'::uuid[],
    "users_generated" uuid[] default '{}'::uuid[],
    "parsing_date" timestamp with time zone not null default now()
);


alter table "telegram"."parsed_posts" enable row level security;

CREATE UNIQUE INDEX manual_posts_pkey ON telegram.manual_posts USING btree (id);

CREATE UNIQUE INDEX options_pkey ON telegram.options USING btree (id);

CREATE UNIQUE INDEX parsed_posts_pkey ON telegram.parsed_posts USING btree (id);

alter table "telegram"."manual_posts" add constraint "manual_posts_pkey" PRIMARY KEY using index "manual_posts_pkey";

alter table "telegram"."options" add constraint "options_pkey" PRIMARY KEY using index "options_pkey";

alter table "telegram"."parsed_posts" add constraint "parsed_posts_pkey" PRIMARY KEY using index "parsed_posts_pkey";

alter table "telegram"."manual_posts" add constraint "manual_posts_parent_id_fkey" FOREIGN KEY (parent_id) REFERENCES telegram.parsed_posts(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "telegram"."manual_posts" validate constraint "manual_posts_parent_id_fkey";

alter table "telegram"."manual_posts" add constraint "manual_posts_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "telegram"."manual_posts" validate constraint "manual_posts_user_id_fkey";

alter table "telegram"."options" add constraint "options_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "telegram"."options" validate constraint "options_user_id_fkey";


alter table "public"."payments" add column "messenger" text;

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
  -- 1) Создаём профиль
  RAISE NOTICE 'Создаю профиль для пользователя %', NEW.id;

  INSERT INTO public.profiles (
      user_id,
      firstname,
      lastname,
      company,
      postal_code,
      country,
      language,
      timezone,
      currency,
      balance,
      is_active
  )
  VALUES (
      NEW.id,
      COALESCE(NEW.raw_user_meta_data ->> 'firstname', ''),
      COALESCE(NEW.raw_user_meta_data ->> 'lastname', ''),
      COALESCE(NEW.raw_user_meta_data ->> 'company', ''),
      COALESCE(NEW.raw_user_meta_data ->> 'postal_code', ''),
      COALESCE(NEW.raw_user_meta_data ->> 'country', ''),
      'RU',
      COALESCE(NEW.raw_user_meta_data ->> 'timezone', 'UTC'),
      'RUB',
      0.0,
      true
  );

  RAISE NOTICE 'Профиль успешно создан.';

  -- 2) Создаём запись в telegram
  RAISE NOTICE 'Создаю telegram настройки для пользователя %', NEW.id;

  INSERT INTO telegram.options (
    id,
    user_id,
    channels_to_parse,
    prompts,
    active_until
  )
  VALUES (
    DEFAULT,
    NEW.id,
    ARRAY[]::varchar[],
    ARRAY[
      'Нужно уникализировать пост',
      'Пост должен содержать экспертное мнение',
      'Нужно повысить читаемость поста'
    ]::text[],
    NOW() + INTERVAL '1 day'
  );

  RAISE NOTICE 'Telegram настройки успешно созданы.';

  -- 3) Создаём тестовую оплату
  RAISE NOTICE 'Создаю оплату для пользователя %', NEW.id;

  BEGIN
    INSERT INTO public.payments (
      id,
      status,
      valid_until,
      payed_at,
      tariff_id,
      amount,
      currency,
      balance,
      messenger,
      user_id
    )
    VALUES (
      DEFAULT,
      'succeeded',
      NOW() + INTERVAL '1 day',
      NOW(),
      3,
      0,
      'RUB',
      0,
      'telegram',
      NEW.id
    );

    RAISE NOTICE 'Оплата успешно добавлена.';
  EXCEPTION
    WHEN OTHERS THEN
      RAISE NOTICE 'Ошибка при создании оплаты: %', SQLERRM;
  END;

  RETURN NEW;
END;$function$
;


