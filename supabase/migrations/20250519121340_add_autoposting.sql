drop trigger if exists "merge_duplicates_trigger" on "public"."telegram_parsed_posts";

drop function if exists "public"."merge_duplicates_after_insert"();


create table "telegram"."auto_posts" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null,
    "parent_id" bigint,
    "content" text not null,
    "image_url" text,
    "scheduled_at" timestamp with time zone,
    "is_publicated" boolean not null default false,
    "created_at" timestamp with time zone not null default now()
);


alter table "telegram"."auto_posts" enable row level security;

alter table "telegram"."options" drop column "count_of_posts";

alter table "telegram"."options" drop column "parsing_timeout";

CREATE UNIQUE INDEX auto_posts_pkey ON telegram.auto_posts USING btree (id);

alter table "telegram"."auto_posts" add constraint "auto_posts_pkey" PRIMARY KEY using index "auto_posts_pkey";

alter table "telegram"."auto_posts" add constraint "auto_posts_parent_id_fkey" FOREIGN KEY (parent_id) REFERENCES telegram.parsed_posts(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "telegram"."auto_posts" validate constraint "auto_posts_parent_id_fkey";

alter table "telegram"."auto_posts" add constraint "auto_posts_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "telegram"."auto_posts" validate constraint "auto_posts_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION telegram.merge_users_after_insert()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$DECLARE
  merged_user_ids uuid[];
  min_id integer;
BEGIN
  -- Собираем объединённый массив user_ids для всех записей с одинаковым content
  SELECT array_agg(DISTINCT user_id_elem)
  INTO merged_user_ids
  FROM (
    SELECT unnest(users) AS user_id_elem
    FROM parsed_posts
    WHERE content = NEW.content
  ) sub;
  
  -- Определяем id записи, которую оставим (например, с минимальным id)
  SELECT min(id)
  INTO min_id
  FROM parsed_posts
  WHERE content = NEW.content;
  
  -- Обновляем выбранную запись объединённым массивом
  UPDATE parsed_posts
  SET users = merged_user_ids
  WHERE id = min_id;
  
  -- Удаляем все остальные дубликаты по данному ключу
  DELETE FROM parsed_posts
  WHERE content = NEW.content AND id <> min_id;
  
  RETURN NEW;
END;$function$
;

grant delete on table "telegram"."auto_posts" to "service_role";

grant insert on table "telegram"."auto_posts" to "service_role";

grant references on table "telegram"."auto_posts" to "service_role";

grant select on table "telegram"."auto_posts" to "service_role";

grant trigger on table "telegram"."auto_posts" to "service_role";

grant truncate on table "telegram"."auto_posts" to "service_role";

grant update on table "telegram"."auto_posts" to "service_role";

grant delete on table "telegram"."manual_posts" to "service_role";

grant insert on table "telegram"."manual_posts" to "service_role";

grant references on table "telegram"."manual_posts" to "service_role";

grant select on table "telegram"."manual_posts" to "service_role";

grant trigger on table "telegram"."manual_posts" to "service_role";

grant truncate on table "telegram"."manual_posts" to "service_role";

grant update on table "telegram"."manual_posts" to "service_role";

grant delete on table "telegram"."options" to "service_role";

grant insert on table "telegram"."options" to "service_role";

grant references on table "telegram"."options" to "service_role";

grant select on table "telegram"."options" to "service_role";

grant trigger on table "telegram"."options" to "service_role";

grant truncate on table "telegram"."options" to "service_role";

grant update on table "telegram"."options" to "service_role";

grant delete on table "telegram"."parsed_posts" to "service_role";

grant insert on table "telegram"."parsed_posts" to "service_role";

grant references on table "telegram"."parsed_posts" to "service_role";

grant select on table "telegram"."parsed_posts" to "service_role";

grant trigger on table "telegram"."parsed_posts" to "service_role";

grant truncate on table "telegram"."parsed_posts" to "service_role";

grant update on table "telegram"."parsed_posts" to "service_role";

CREATE TRIGGER merge_duplicates_trigger AFTER INSERT ON telegram.parsed_posts FOR EACH ROW EXECUTE FUNCTION telegram.merge_users_after_insert();


